# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dfGdksn2xO7vm2VV2PWDrI4R7pLQnp-z
"""

#import libraries
import numpy as np
import tensorflow as tf
from tensorflow.keras import datasets,layers,models
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

#load the MNIST dataset
(train_images,train_labels),(test_images,test_labels)=datasets.mnist.load_data()

train_images=train_images/255.0
test_images=test_images/255.0

#reshape the images to (28,28,1) as they are grayscale
train_images=train_images.reshape(train_images.shape[0],28,28,1)
test_images=test_images.reshape(test_images.shape[0],28,28,1)

# Check the shape of the labels before applying to_categorical
print("Original train_labels shape:", train_labels.shape)
print("Original test_labels shape:", test_labels.shape)

#convert the labels to one hot encoded format
train_labels=to_categorical(train_labels)
test_labels=to_categorical(test_labels)

# Check the shape of the labels after applying to_categorical
print("One-hot encoded train_labels shape:", train_labels.shape)
print("One-hot encoded test_labels shape:", test_labels.shape)

#Build the CNN model
model=models.Sequential()

#first CNN layer
model.add(layers.Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)))
model.add(layers.MaxPooling2D((2,2)))

#second Layer
model.add(layers.Conv2D(64,(3,3),activation='relu'))
model.add(layers.MaxPooling2D((2,2)))

#third layer
model.add(layers.Conv2D(64,(3,3),activation='relu'))

#flatten the 3D Output to 1D and add Dense Layer
model.add(layers.Flatten())
model.add(layers.Dense(64,activation='relu'))

#output layer with 10 neurans (for10 digit classes)
model.add(layers.Dense(10,activation='softmax'))

#compail the model
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

#train the model
model.fit(train_images,train_labels,epochs=5,batch_size=64,validation_data=(test_images,test_labels))

#evaluate the model on test data
test_loss,test_acc=model.evaluate(test_images,test_labels)
print(f"Test accuracxy : { test_acc*100:.2f}%")

#prediction on test images
predictions=model.predict(test_images)
print(f"Prediction for the first image :{np.argmax(predictions[0])}")

plt.imshow(test_images[0].reshape(28,28),cmap='gray')
plt.title(f"Predicted Label :{predictions[0].argmax()}")
plt.show()